Immutable Class
    - A class whose instances cannot be modified
        - The information contained in each instance is fixed for the lifetime of the object, so no change
          can be observed
        - Java platform libraries contain many immutable classes, including String, the boxed primitive, and
          BigInteger and BigDecimal
    - Immutable classes are easier to design, implement, and use than mutable classes
        - They are also less prone to error and are more secure
    - Should encourage clients to reuse existing instances whenever possible
        - An easy way to do this is to provide public static final constants for commonly used values

Immutable Objects
    - can be in exactly one state, the state in which it was created
    - If the constructor establish class invariants, the object is guaranteed these invariants
      will remain true for all times
    - Mutable objects, on the other hand, can have arbitrary complex state spaces
        - If the documentation does not provide a precise description of the state transition
          perform by mutator methods, it can be difficult or impossible to use a mutable class
          reliably.
    - Inherently thread-safe and requires no synchronization
        - They cannot be corrupted by multiple threads accessing them concurrently
        - Can be shared freely among threads

Rules to Make an Object Immutable
    1) Don't provide methods that modify the object's state (known as mutators)
    2) Ensure that the class can't be extended
        - Prevents careless or malicious subclasses from compromising the immutable behavior of the class
        - Preventing subclassing is generally accomplished by making the class final
    3) Make all fields final
    4) Make all fields private
        - prevents clients from obtaining access to mutable objects referred to by fields and modifying
          these objects directly
        - it is not recommended for immutable classes to have public final fields containing primitive values
          or references to immutable objects
            - If we include this fields, we are unable to change its internal representation in future releases
    5) Ensure exclusive access to any mutable components
        - If the class has any fields that refer to mutable objects, ensure the clients of the class cannot
          obtain references to these objects
        - Make defensive copies in constructors, accessors, and readObject methods

What are the Disadvantage of Immutable Classes
    - Requires a separate object for each distinct value
        - Creating these objects can be costly, especially if they are large
        - Example: If we have a million-bit BigInteger and we want to change its low-order bit
            - The flipBit method creates a new BigInteger instance, also a million bits long, that
              differs by only one bit
            - Like BigInteger, BitSet represents an arbitrarily long sequence of bits, but unlike
              BigInteger, BitSet is mutable
                - Flipping one bit in BitSet can be done in constant time
    - This performance problem is magnified if we perform a multistep operation that generates
      a new object at every step, eventually discarding all objects except the final result